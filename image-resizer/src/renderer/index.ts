import { app, BrowserWindow, ipcMain, Menu } from 'electron';
import path from 'path';
import os from 'os';
import { resizeImage } from '../utils/resizeImage';
// This allows TypeScript to pick up the magic constants that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_WEBPACK_ENTRY: string;
declare const ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

const isMac = process.platform === "darwin";

export let mainWindow: BrowserWindow;
export let aboutWindow: BrowserWindow;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  app.quit();
}

const createWindow = (): void => {
  // Create the browser window.
  mainWindow = new BrowserWindow({
    height: 600,
    width: 800,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
    },
  });

  const menu = Menu.buildFromTemplate([
    ...(isMac ? [{
      label: app.name,
      submenu: [{
        label: 'About',
        click: () => createAboutWindow()
      }]
    }] : []),
    {
      role: 'fileMenu'
    },
    ...(!isMac ? [{
      label: 'Help',
      submenu: [{ label: 'About', click: () => createAboutWindow() }]
    }] : [])
  ]);

  Menu.setApplicationMenu(menu);

  // and load the index.html of the app.
  mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);

  if (process.env.NODE_ENV !== "production") {
    // Open the DevTools.
    mainWindow.webContents.openDevTools();
  }
};

function createAboutWindow() {
  aboutWindow = new BrowserWindow({
    title: 'About Image Resizer',
    autoHideMenuBar: true,
    webPreferences: {
      preload: ABOUT_WINDOW_PRELOAD_WEBPACK_ENTRY
    },
    width: 300,
    height: 300
  });


  aboutWindow.loadURL(ABOUT_WINDOW_WEBPACK_ENTRY);
}

// This method will be called when Electron has finished
// initialization and is ready to create browser windows.
// Some APIs can only be used after this event occurs.
app.on('ready', () => {
  ipcMain.on('image:resize', (event, options) => {
    options.dest = path.join(os.homedir(), 'imageresizer');
    resizeImage(options);
  });

  createWindow();
});

// Quit when all windows are closed, except on macOS. There, it's common
// for applications and their menu bar to stay active until the user quits
// explicitly with Cmd + Q.
app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

app.on('activate', () => {
  // On OS X it's common to re-create a window in the app when the
  // dock icon is clicked and there are no other windows open.
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.
